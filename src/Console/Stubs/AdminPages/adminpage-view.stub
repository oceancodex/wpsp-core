<?php

namespace {{ rootNamespace }}\app\Extend\Components\AdminPages;

use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\CacheStorage;
use {{ rootNamespace }}\app\Extend\Components\License\License;
use {{ rootNamespace }}\app\Extend\Instances\Cache\Cache;
use {{ rootNamespace }}\app\Extend\Instances\Cache\RateLimiter;
use {{ rootNamespace }}\app\Models\SettingsModel;
use {{ rootNamespace }}\app\Models\VideosModel;
use {{ rootNamespace }}\app\Traits\InstancesTrait;
use {{ rootNamespace }}\Funcs;
use {{ coreNamespace }}\Base\BaseAdminPage;

class {{ className }} extends BaseAdminPage {

	use InstancesTrait;

	public $menu_title          = '{{ name }}';
//	public $page_title          = '{{ name }}';
	public $capability          = 'manage_options';
//	public $menu_slug           = '{{ path_slugify }}';
	public $icon_url            = 'dashicons-admin-generic';
	public $position            = 2;
//	public $isSubAdminPage      = true;
//	public $parent_slug         = 'options-general.php';
//	public $removeFirstSubmenu  = false;

//	private $checkDatabase      = null;
	private $table              = null;
	private $currentTab         = null;
	private $currentPage        = null;

	/*
	 *
	 */

	public function customProperties(): void {
//		$this->menu_title     = '';
//		$this->page_title     = '';
//		$this->capability     = '';
//		$this->menu_slug      = '';
//		$this->icon_url       = '';
//		$this->position       = '';
//		$this->isSubAdminPage = false;
//		$this->parent_slug    = '';

		$this->currentTab   = $this->request->get('tab');
		$this->currentPage  = $this->request->get('page');
		$this->page_title   = ($this->currentTab ? Funcs::trans('messages.' . $this->currentTab) : Funcs::trans('messages.{{ name }}')) . ' - ' . Funcs::config('app.name');
	}

	/*
	 *
	 */

//	public function init($path = null): void {
//		// You must call to parent method "init" if you want to custom it.
//		parent::init();
//	}

	public function beforeInit(): void {}

	public function afterInit(): void {
//		if ($this->currentPage == $this->menu_slug) {
//			// Check database version and maybe redirect.
//			$this->checkDatabase = Funcs::instance()->_getAppMigration()->checkDatabaseVersion();
//			if (!$this->checkDatabase['result'] && $this->currentPage == $this->getMenuSlug() && $this->currentTab !== 'database') {
//				$url = Funcs::instance()->_buildUrl($this->getParentSlug(), [
//					'page' => $this->getMenuSlug(),
//					'tab'  => 'database',
//				]);
//				wp_redirect($url);
//			}
//		}
	}

	public function afterLoad($adminPage): void {
//		if ($this->request->get('tab') == 'table') {
//			$this->table = new \{{ rootNamespace }}\app\Extend\Components\ListTables\Settings();
//		}
	}

//	public function screenOptions($adminPage): void {
//		if ($this->request->get('tab') == 'table') {
//			parent::screenOptions($adminPage);
//		}
//	}

	/*
	 *
	 */

	public function index(): void {
//		if ($this->request->get('updated') && $this->parent_slug !== 'options-general.php' && $this->request->get('tab') !== 'table') {
//			Funcs::notice(Funcs::trans('Updated successfully', true), 'success');
//		}

		$requestParams = $this->request->query->all();
		$menuSlug      = $this->getMenuSlug();

		$table = $this->table;

		echo Funcs::view('modules.web.admin-pages.{{ path }}.main', compact(
			'requestParams',
			'menuSlug',
			'table'
		));
	}

	public function update(): void {
//		$tab = $this->request->get('tab');
//		if ($tab !== 'table') {
//			$settings = $this->request->get('settings');
//
////			$existSettings = Cache::getItemValue('settings');
//			$existSettings = SettingsModel::query()->where('key','settings')->first();
//			$existSettings = json_decode($existSettings['value'] ?? '', true);
//			$existSettings = array_merge($existSettings ?? [], $settings ?? []);
//
//			// Save settings into cache.
////			Cache::set('settings', function() use ($existSettings) {
////				return $existSettings;
////			});
//
//			// Delete license information cache.
//			Cache::delete('license_information');
//
//			// Save settings into database.
//			SettingsModel::updateOrCreate([
//				'key' => 'settings',
//			], [
//				'value' => json_encode($existSettings),
//			]);
//
//			wp_safe_redirect(wp_get_raw_referer() . '&updated=true');
//		}
	}

	/*
	 *
	 */

	public function styles(): void {
//		wp_enqueue_style(
//			Funcs::config('app.short_name') . '-admin',
//			Funcs::instance()->_getPublicUrl() . '/css/admin.min.css',
//			null,
//			Funcs::instance()->_getVersion()
//		);
	}

	public function scripts(): void {
//		wp_enqueue_script(
//			Funcs::config('app.short_name') . '-database',
//			Funcs::instance()->_getPublicUrl() . '/js/modules/web/admin-pages/wpsp/Database.min.js',
//			null,
//			Funcs::instance()->_getVersion(),
//			true
//		);
	}

	public function localizeScripts(): void {
//		wp_localize_script(
//			Funcs::config('app.short_name') . '-database',
//			Funcs::config('app.short_name') . '_localize',
//			[
//				'ajax_url'   => admin_url('admin-ajax.php'),
//				'nonce'      => wp_create_nonce(Funcs::config('app.short_name')),
//				'public_url' => Funcs::instance()->_getPublicUrl(),
//			]
//		);
	}

}